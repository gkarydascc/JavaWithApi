/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package apiinteractorclasses;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import static java.lang.Math.pow;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author GeorgeK
 */
public class UserInterface extends javax.swing.JFrame {

    /**
     * Creates new form UserInterface
     */
    List<Product> storeItems;
    List<String> cartItems;
    boolean searchUntouched;
    public UserInterface() {
        initApiComponets();
        initComponents();
        initExtraComponets();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void initApiComponets(){
        storeItems=new ArrayList<Product>();
        cartItems=new ArrayList<String>();
        storeItems.add(new Product("Orange",3,3.5));
        storeItems.add(new Product("Gasoline",34,345.5));
        storeItems.add(new Product("Milk",1,34));
    }
    public void initExtraComponets(){
        this.setMinimumSize(new Dimension(800,600));
        this.getContentPane().setBackground(Color.WHITE);
      
        addButton.setBackground(Color.getHSBColor((float) 0.64,(float)0.249, (float) 0.637));
        submitButton.setBackground(Color.getHSBColor((float) 0.64,(float)0.249, (float) 0.637));
        //addButton.setBackground(Color.getHSBColor((float) 2.19, (float) 0.90, (float) 0.71));
        deleteButton.setBackground(Color.getHSBColor((float) 0,(float)0.90, (float) 0.70));
        
        searchUntouched=true;
        String list[]=new String[storeItems.size()];
        int length = list.length;
        for(int i=0;i<length;i++)
            list[i]=storeItems.get(i).getName()+"  /  "+storeItems.get(i).getPoints();
        itemList.setListData(list);
        if(length>-1)
             itemList.setSelectedIndex(0);
        searchTextField.addKeyListener(new KeyAdapter() {
        @Override
        public void keyPressed(KeyEvent e) {
             //   e.
                if(e.getKeyCode() == KeyEvent.VK_ENTER){
                    itemAmountTextField.requestFocus();
                }
                else if(isValidKeyPress(e)){
                   searchResultUpdate(e); 
                }
                else if(e.getKeyCode()>36&&e.getKeyCode()<41){
                    listSelectionUpdate(e);
                }
                //  System.out.println(e.getKeyCode());
        }

    });
    searchTextField.addKeyListener(new KeyAdapter() {
        @Override
        public void keyPressed(KeyEvent e) {
            if(searchUntouched){
                searchUntouched=false;
                searchTextField.setText("");
            }    
            //  System.out.println(e.getKeyCode());
        }

    });    
    }
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu1 = new java.awt.PopupMenu();
        addButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        purchaseList = new javax.swing.JList<>();
        deleteButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        shoppingLabel = new javax.swing.JLabel();
        itemLabel = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        shoppingAmountTextField = new javax.swing.JTextField();
        itemAmountTextField = new javax.swing.JTextField();

        popupMenu1.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addButton.setText("Add Item");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        itemList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(itemList);

        purchaseList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(purchaseList);

        deleteButton.setText("Delete Item");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        submitButton.setText("Submit Purchase");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        shoppingLabel.setText("Shopping Cart");

        itemLabel.setText("Item List");

        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        shoppingAmountTextField.setText("1");
        shoppingAmountTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shoppingAmountTextFieldActionPerformed(evt);
            }
        });

        itemAmountTextField.setText("1");
        itemAmountTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAmountTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(137, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(itemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(shoppingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addGap(124, 124, 124)
                        .addComponent(submitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                        .addComponent(deleteButton))
                    .addComponent(searchTextField)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(itemAmountTextField)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                        .addGap(186, 186, 186)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shoppingAmountTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(137, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(shoppingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(shoppingAmountTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(itemAmountTextField))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
          
        addToCart();
          
    }//GEN-LAST:event_addButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_submitButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        removeFromCart();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void itemAmountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAmountTextFieldActionPerformed
       
        addToCart();
         
    }//GEN-LAST:event_itemAmountTextFieldActionPerformed

    private void shoppingAmountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shoppingAmountTextFieldActionPerformed
        removeFromCart();
    }//GEN-LAST:event_shoppingAmountTextFieldActionPerformed
    private void removeFromCart(){
        if(purchaseList.getSelectedIndex()==-1){
            //popup Later
            return ;
        }
        String addedString=purchaseList.getSelectedValue();
        String[] strings=addedString.split("/",3);
        if(strings.length>1){
            int amountOfItem=pointsFromString(shoppingAmountTextField.getText());
            if(amountOfItem>-1){
                int amountPerItem=pointsFromString(strings[1]);
                int totalBought=pointsFromString(strings[2]);
              //  System.out.println(strings[0]+ "  "+strings[1]+strings[2]);
                if(amountPerItem>-1&&totalBought>-1){
                    int finalAmount=totalBought-amountPerItem*amountOfItem;
                  //  System.out.println(finalAmount);
                    int selectedIndex=purchaseList.getSelectedIndex();
                    if(finalAmount>0){
                        cartItems.set(selectedIndex,strings[0]+"/  "+amountPerItem+"  /  "+finalAmount);
                    }
                    else{
                        cartItems.remove(selectedIndex);
                    }
                     String list[]=new String[cartItems.size()];
                     int length = list.length;
                     for(int i=0;i<length;i++)
                          list[i]=cartItems.get(i);
                     purchaseList.setListData(list);
                }
            }else{
                //popup Later
            }
     
        }
    }
    private void addToCart(){
       
        if(itemList.getSelectedIndex()==-1){
      
//popup Later
            return ;
        }
        String addedString=itemList.getSelectedValue();
       // System.out.println(addedString);
        String[] strings=addedString.split("/",2);
        if(strings.length>1){
                   
            int amountOfItem=pointsFromString(itemAmountTextField.getText());
            if(amountOfItem>-1){
                    
                int amountPerItem=pointsFromString(strings[1]);
                if(amountPerItem>-1){
                    int index=cartContains(strings[0]+"/  "+amountPerItem);
                    
                    if(index>-1){
                        String[] temp=cartItems.get(index).split("/",3);
                        String put=strings[0]+"/  "+amountPerItem+"  /  "+((amountPerItem*amountOfItem)+pointsFromString(temp[2]));
                        cartItems.set(index, put);
                    } 
                    else
                         cartItems.add(strings[0]+"/  "+amountPerItem+"  /  "+amountOfItem*amountPerItem);
                     String list[]=new String[cartItems.size()];
                     int length = list.length;
                     for(int i=0;i<length;i++)
                          list[i]=cartItems.get(i);
                     purchaseList.setListData(list);
                }
            }else{
                                        //popup Later
            }
     
        }
    }
    private void searchResultUpdate(KeyEvent e){
         String search=searchTextField.getText().toLowerCase();
                    
                    if(e.getKeyCode()!=8)
                        search=search+e.getKeyChar();
                    else{
                        search=(String) search.subSequence(0,search.length()-1);
                    }
                    
                    int length=storeItems.size();
                    int amountDisplayed=0;
                    for(int i=0;i<length;i++){
                        String compareString=storeItems.get(i).getName();
                        String stringSmall=compareString.toLowerCase();
                        if(stringSmall.equals(search)||stringSmall.contains(search)){
                            amountDisplayed++;
                        }
                    }
                    String[] list=new String[amountDisplayed];
                    int found=0;
                    for(int i=0;i<length&&found<amountDisplayed;i++){
                        String compareString=storeItems.get(i).getName();
                        String stringSmall=compareString.toLowerCase();
                        if(stringSmall.equals(search)||stringSmall.contains(search)){
                            list[found]=storeItems.get(i).getName()+"  /  "+storeItems.get(i).getPoints();;
                            found++;
                        }
                    }
                    // String[] roar={"0"};
                    itemList.setListData(list);
                    //itemList.setSelectedIndex(0);
                   
                    
                    if(amountDisplayed>0)
                       itemList.setSelectedIndex(0);
                    
    }
    private void listSelectionUpdate(KeyEvent e){
        if(itemList.getMaxSelectionIndex()<0)
            return ;
        if(e.getKeyCode()==KeyEvent.VK_DOWN){         
                itemList.setSelectedIndex(itemList.getSelectedIndex()+1);
           
        }
        else if(e.getKeyCode()==KeyEvent.VK_UP){
            if(itemList.getSelectedIndex()>0)
                itemList.setSelectedIndex(itemList.getSelectedIndex()-1);
        }
    }
    private void searchTextFieldKeyPressed(KeyEvent e){
        
    }
    private boolean isValidKeyPress(KeyEvent e){
        int code=e.getKeyCode();
        if((code>43&&code<58)||(code>64&&code<93)||(code>95&&code<112)){
             return true;
        }
        if(code==8||code==127||code==130||code==32){
            return true;
        }
        return false;
    }
    int pointsFromString(String points){
       points=points.trim();
       int pointLength = points.length();
       int convertedString=0;
       for(int i=0;i<pointLength;i++){
           if(points.charAt(i)<48||points.charAt(i)>57)
               return -1;
       }
       for(int i=pointLength-1;i>-1;i--){
         //  System.out.println(points.charAt(i)+"/"+(points.charAt(i)-48)+"/"+((pointLength-1-i)));
           //System.out.println();
           convertedString=(int) (convertedString+((points.charAt(i)-48)*(pow(10,(pointLength-1-i)))));
       }
       return convertedString;
    }
    public void postToApi(){
        
    }
    /**
     * @param args the command line arguments
     */
    public int cartContains(String containedString){
        int size=cartItems.size();
      //  String cTrimmed=containedString.trim();
        for(int i=0;i<size;i++){
         //   System.out.println(cTrimmed);
          //  System.out.println(cartItems.get(i).trim());
            if(cartItems.get(i).startsWith(containedString))
                return i;
        }
        return -1;
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */ 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField itemAmountTextField;
    private javax.swing.JLabel itemLabel;
    private javax.swing.JList<String> itemList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.PopupMenu popupMenu1;
    private javax.swing.JList<String> purchaseList;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JTextField shoppingAmountTextField;
    private javax.swing.JLabel shoppingLabel;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
